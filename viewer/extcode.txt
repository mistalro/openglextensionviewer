<begin><main></begin><fileopen><outputheader><call><headerfile><fileclose><fileopen><outputsource><call><sourcefile><fileclose><end><begin><fileheader></begin>// --------------------------------------------------------------------------
<if><cppmode>// <filetype> file for the <classname> <moduletype>
<endif><if><cmode>// <filetype> file for the extension manager
<endif>//
// Stored in file <outputsource>
//
// File:   <filename>
// Author: Automatic code generator
// Date:   <time>
// System: <hostname>
// User:   <username>
// Script: <scriptfile>
// Config: <configfile>
// Path:   <filepath>
//
// From: extcode.h (Internal version)
// --------------------------------------------------------------------------
//
// This file is based on the following header files:
//
<foreach><extregistry>// Set <extregistrycounter>
// <wglheader> - Version <wglversion>
// <glheader>  - Version <glversion>
// <glxheader> - Version <glxversion>
//
<endfor>// --------------------------------------------------------------------------
//
// The following extensions are currently supported by this class:
//
<if><glnum>// ----- <glmax> GL extensions ---------
//
<foreach><glext><if><selected>// <glcounter> <extname>
<endif><endfor><endif><if><wglnum>//
// ----- <wglmax> WGL extensions ----------
//
<foreach><wglext><if><selected>// <wglcounter> <extname>
<endif><endfor><endif><if><glxnum>//
// ----- <glxmax> GLX extensions ----------
//
<foreach><glxext><if><selected>// <glxcounter> <extname>
<endif><endfor><endif>// --------------------------------------------------------------------------
<end>

<begin><headerprototype></begin>#ifdef <extname>
<if><cmode><foreach><extfunclist>extern <pfnproc> <funcname>;
<endfor><endif><if><cppmode><foreach><extfunclist><pfnproc> <funcname>;
<endfor><endif>#endif		// <extname>
<end>
<begin><headercondes></begin>// ----- Constructors -------------------------------------------------------

<classname>( void );

// ------ Destructors -------------------------------------------------------

~<classname>();

// ------ Initialisation routines -------------------------------------------
<end><begin><glgetprocaddress></begin>// ----------------------------------------------------------------------------
// Find the call address of a WGL or GLX extension function
// ----------------------------------------------------------------------------

void *<classname::>GetGLProcAddress( char *buf )
{
#ifdef _WIN32
	return( wglGetProcAddress( buf ) );
#endif

#ifdef LOAD_LIBRARY
return( dlsym( m_libhandler, buf ) );
#endif

#ifdef _GLX
	return( (void *) glXGetProcAddressARB( (const GLubyte *) buf ) );
#endif

return( NULL );
}
<end><begin><headerfile></begin><call><fileheader>
#define LOAD_LIBRARY

#ifndef __EXTMANAGER__
#define __EXTMANAGER__

<if><cppmode>class <classname>
{
public:
<endif><if><extnum>// Extension presence flags

<endif>
void *m_libhandler;
<if><cmode><foreach><version>extern int m_OpenGL<versionvar>;
<endfor><endif><if><cppmode><foreach><version>int m_OpenGL<versionvar>;
<endfor><endif>
<if><cmode><foreach><glext><if><selected>extern int m_<extname>;
<endif><endfor><endif><if><cppmode><foreach><glext><if><selected>int m_<extname>;
<endif><endfor><endif><if><glnum>
<endif><if><wglnum>#ifdef _WIN32

<if><cmode><foreach><wglext><if><selected>extern int m_<extname>;
<endif><endfor><endif><if><cppmode><foreach><wglext><if><selected>int m_<extname>;
<endif><endfor><endif>
#endif		// _WIN32

<endif><if><glxnum>#ifdef _GLX

<if><cmode><foreach><glxext><if><selected>extern int m_<extname>;
<endif><endfor><endif><if><cppmode><foreach><glxext><if><selected>int m_<extname>;
<endif><endfor><endif>
#endif		// _GLX

<endif><if><glfuncnum>//
// ----- GL extensions --------
//

<foreach><glext><if><selected><if><funcnum><call><headerprototype>
<endif><endif><endfor><endif><if><wglfuncnum>//
// ----- WGL extensions --------
//

<foreach><wglext><if><selected><if><funcnum><call><headerprototype>
<endif><endif><endfor>
<endif><if><glxfuncnum>//
// ----- GLX extensions --------
//

<foreach><glxext><if><selected><if><funcnum><call><headerprototype>
<endif><endif><endfor><endif><if><wglfuncnum>int padding2[1024]; // Bodge to handle Visual Studio C++ bug

<endif><if><cppmode><call><headercondes><endif>void *GetGLProcAddress( char *buf );
int  StringSearch( char *pext, char *pstring );
int  CheckGLExtension(  char *pchname );
void CheckOpenGLVersion( void );
<if><glnum>void CheckOpenGLExtensions( void );
<endif><if><wglnum>void CheckWGLExtensions( void );
int  CheckWGLExtension( char *pchname );
<endif><if><glxnum>void CheckGLXExtensions( void );
int  CheckGLXExtension( char *pchname );
<endif>void ExtensionInit( void );
<if><glfuncnum>
// ----- GL extensions -----------

<foreach><glext><if><selected><if><funcnum>void Init_<extname>( void );
<endif><endif><endfor><endif><if><wglnum>
// ----- WGL extensions --------

#ifdef _WIN32

<foreach><wglext><if><selected><if><funcnum>void Init_<extname>( void );
<endif><endif><endfor>
#endif		// _WIN32
<endif><if><glxnum>
// ----- GLX extensions ---------

#ifdef _GLX

<foreach><glxext><if><selected><if><funcnum>void Init_<extname>( void );
<endif><endif><endfor>
#endif		// _GLX

<endif><if><cppmode>};

<endif>#endif		// __EXTMANAGER__
<end>
<begin><headerinit></begin>#ifdef <extname>
<if><cppmode><foreach><extfunclist>	<funcname> = NULL;
<endfor><endif><if><cmode><foreach><extfunclist><pfnproc>	<funcname> = NULL;
<endfor><endif>#endif		// <extname>

<end>
<begin><sourceinit></begin>// --------------------------------------------------------------------------
// Initialise extension <extname>
//
// Inputs: None
//
// Outputs: None
//
// Results: None
//
// Effects: The extension is initialised
// --------------------------------------------------------------------------

void <classname::>Init_<extname>( void )
{
#ifdef <extname>
if (!m_<extname>)
	return;
<if><funcnum>
<endif><foreach><extfunclist><funcname> = (<pfnproc>) GetGLProcAddress( "<funcname>");
<endfor>#endif
}

<end>
<begin><extpresflagsc></begin>
// Extension presence flags

<foreach><version>int m_OpenGL<versionvar> = 0;
<endfor><foreach><glext><if><selected>int m_<extname> = 0;
<endif><endfor><if><wglnum>
#ifdef _WIN32

<foreach><wglext><if><selected><if><wgldef>int m_<extname> = 0;
<endif><endif><endfor>
#endif		//_WIN32

<endif><if><glxnum>
#ifdef _GLX

<foreach><glxext><if><selected><if><glxdef>int m_<extname> = 0;
<endif><endif><endfor>
#endif		//_GLX

<endif><end><begin><extpresflagscpp></begin>}

// --------------------------------------------------------------------------
// Destructor
// --------------------------------------------------------------------------

<classname::>~<classname>( void )
{
	// ... Destructor ...
}

<end><begin><checkglext></begin>// --------------------------------------------------------------------------
// Routine to check the OpenGL Extensions
//
// Inputs: None
//
// Outputs: None
//
// Results: None
//
// Effects: Status flags are set according to the OpenGL version present
// --------------------------------------------------------------------------

void <classname::>CheckOpenGLExtensions( void )
{
<foreach><glext><if><selected>m_<extname> = CheckGLExtension( "<extname>" );
<endif><endfor>}

<end><begin><checkwglext></begin>// --------------------------------------------------------------------------
// Routine to check the presence of a Windows OpenGL extension
//
// Inputs: None
//
// Outputs: None
//
// Results: 1 is returned if the extension exists, 0 otherwise
//
// Effects: None
// --------------------------------------------------------------------------

#ifdef _WIN32

int <classname::>CheckWGLExtension( char *pchname )
{
GLubyte *pextstring;

HDC      hdc;

hdc = wglGetCurrentDC();
PFNWGLGETEXTENSIONSSTRINGARBPROC wglproc;

wglproc = (PFNWGLGETEXTENSIONSSTRINGARBPROC)
        wglGetProcAddress( "wglGetExtensionsStringARB" );

if ( wglproc != NULL )
	pextstring = (GLubyte*) wglproc(hdc);
/*
else
	if ( wglGetExtensionsStringARB != NULL )
		pextstring = (GLubyte *) wglGetExtensionsStringEXT();
*/
else
	return(0);

return( StringSearch( (char *) pextstring, (char *) pchname ) );
}

// --------------------------------------------------------------------------
// Routine to check the WGL Extensions
//
// Inputs: None
//
// Outputs: None
//
// Results: None
//
// Effects: Status flags are set according to the OpenGL version present
// --------------------------------------------------------------------------

void <classname::>CheckWGLExtensions( void )
{
<foreach><wglext><if><selected>m_<extname> = CheckWGLExtension( "<extname>" );
<endif><endfor>}
#endif		// #ifdef _WIN32

<end><begin><checkglxext></begin>// --------------------------------------------------------------------------
// Routine to check the presence of a Windows OpenGL extension
//
// Inputs: None
//
// Outputs: None
//
// Results: 1 is returned if the extension exists, 0 otherwise
//
// Effects: None
// --------------------------------------------------------------------------

#ifdef _GLX
int <classname::>CheckGLXExtension( char *pchname )
{
Display *dptr;
int result = 0;
char *pstr;

dptr = XOpenDisplay(NULL);

if ( dptr )
	{
	pstr = (char *) glXGetClientString( dptr, GLX_EXTENSIONS );

	result = ( strstr( pstr, pchname) != NULL );

	pstr = (char *) glXQueryExtensionsString( dptr, 0 );

	result |= ( strstr( pstr, pchname) != NULL );

	pstr = (char *) glXQueryServerString( dptr, 0, GLX_EXTENSIONS );

	result |= ( strstr( pstr, pchname) != NULL );

	XCloseDisplay(dptr);
	}

return( result );
}

// --------------------------------------------------------------------------
// Routine to check the GLX Extensions
//
// Inputs: None
//
// Outputs: None
//
// Results: None
//
// Effects: Status flags are set according to the OpenGL version present
// --------------------------------------------------------------------------

void <classname::>CheckGLXExtensions( void )
{
<foreach><glxext><if><selected>m_<extname> = CheckGLXExtension( "<extname>" );
<endif><endfor>}
#endif		// #ifdef _GLX

<end><begin><sourcefile></begin><call><fileheader>

#ifdef _WIN32
//#include "stdafx.h"
#endif

#include <stdio.h>
#include <string.h>
#include <GL/gl.h>
#include <GL/glext.h>
#ifdef _WIN32
#include <GL/wglext.h>
#endif

#define _GLX

#ifdef  _GLX
//#include "X.h"
//#include "Xlib.h"
//#include "Xutil.h"
#include <GL/gl.h>
#include <GL/glx.h>
#include <GL/glxext.h>
#endif

#include "<outputheader>"

// Include this so we can read the libGL.so.1 file directly

#ifdef LOAD_LIBRARY
#include <dlfcn.h>
#endif

<if><cppmode>// --------------------------------------------------------------------------
// Default constructor
// --------------------------------------------------------------------------

<classname::><classname>( void )
{
<endif><if><glfuncnum>// ----- GL extensions -------

<foreach><glext><if><selected><if><funcnum><call><headerinit><endif><endif><endfor>
<endif><if><wglfuncnum>// ----- WGL extensions --------
#ifdef _WIN32

<foreach><wglext><if><selected><if><funcnum><call><headerinit><endif><endif><endfor>#endif		// _WIN32
<endif><if><glxfuncnum>// ----- GLX extensions --------

#ifdef _GLX

<foreach><glxext><if><selected><if><funcnum><call><headerinit><endif><endif><endfor>#endif		// _GLX
<endif><if><cmode><call><extpresflagsc><endif><if><cppmode><call><extpresflagscpp><endif><call><glgetprocaddress>
// --------------------------------------------------------------------------
// Routines to search for an extension string in another string
//
// Inputs: None
//
// Outputs: None
//
// Results: 1 is returned if the substring is found, 0 otherwise
//
// Effects: None
// --------------------------------------------------------------------------

int <classname::>StringSearch( char *pext, char *pstring )
{
char *pstart, *pend;
int len;

if ( !(pstart = strstr( pext, pstring ) ) )
	return( 0 );

if ( (pstart > pext) && (pstart[-1] != ' ') )
	 return( 0 );

len  = strlen(pstring);
pend = pstart + len;

while ( pstart && (*pend != ' ') && (*pend != '\0') )
    {
	 pstart = strstr( pend, pstring );

	 if ( pstart )
        pend   = pstart + len;
	 else
        pend = NULL;
	 }

if ( !pend )
    return( 0 );

if ( (*pend != ' ') && (*pend != '\0' ) )
    return( 0 );

return( 1 );
}

// --------------------------------------------------------------------------
// Routine to check the presence of an OpenGL extension
//
// Inputs: None
//
// Outputs: None
//
// Results: 1 is returned if the extension exists, 0 otherwise
//
// Effects: None
// --------------------------------------------------------------------------

int <classname::>CheckGLExtension( char *pchname )
{
GLubyte *pextstring;

pextstring = (GLubyte *) glGetString(GL_EXTENSIONS);

return( StringSearch( (char *) pextstring, (char *) pchname ) );
}

// --------------------------------------------------------------------------
// Routine to check the OpenGL Version
//
// Inputs: None
//
// Outputs: None
//
// Results: None
//
// Effects: Status flags are set according to the OpenGL version present
// --------------------------------------------------------------------------

void <classname::>CheckOpenGLVersion( void )
{
<foreach><version>m_OpenGL<versionvar> = CheckGLExtension( "<versionname>" );
<endfor>}

<if><glnum><call><checkglext><endif><if><wglnum><call><checkwglext><endif><if><glxnum><call><checkglxext><endif>// --------------------------------------------------------------------------
// Main initialisation routine
//
// Inputs: None
//
// Outputs: None
//
// Results: None
//
// Effects: The initialisation routines are called
// --------------------------------------------------------------------------

void <classname::>ExtensionInit( void )
{
#ifdef LOAD_LIBRARY
m_libhandler = dlopen( "/usr/lib/libGL.so.1", RTLD_NOW | RTLD_GLOBAL );
// printf( "Opened handler = %08X\n", (unsigned int) m_libhandler );
#endif

CheckOpenGLVersion();
<if><glnum>CheckOpenGLExtensions();
<endif><if><glfuncnum>
<foreach><glext><if><selected><if><funcnum>Init_<extname>();
<endif><endif><endfor>
<endif><if><wglnum>
#ifdef _WIN32
CheckWGLExtensions();
<foreach><wglext><if><selected><if><funcnum>Init_<extname>();
<endif><endif><endfor>#endif

<endif><if><glxnum>#ifdef _GLX
CheckGLXExtensions();
<foreach><glxext><if><selected><if><funcnum>Init_<extname>();
<endif><endif><endfor>#endif
<endif>#ifdef LOAD_LIBRARY
//printf( "Closing libhandler %08X\n", (unsigned int) m_libhandler );
dlclose( m_libhandler );
#endif // LOAD_LIBRARY
}

<foreach><glext><if><selected><if><funcnum><call><sourceinit><endif><endif><endfor><if><wglnum>#ifdef _WIN32
<foreach><wglext><if><selected><if><funcnum><call><sourceinit><endif><endif><endfor>#endif
<endif><if><glxfuncnum>#ifdef _GLX
<foreach><glxext><if><selected><if><funcnum><call><sourceinit><endif><endif><endfor>#endif // _GLX
<endif><end>
